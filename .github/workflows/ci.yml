name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.5.9"

jobs:
  # Fast pre-check job to fail fast on obvious issues
  pre-check:
    name: Pre-flight checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      uv-cache-key: ${{ steps.setup.outputs.uv-cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Only fetch the specific commit for performance
          fetch-depth: 1

      - name: Setup Python and uv
        id: setup
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Validate pyproject.toml
        run: uv tree --resolution-mode=highest 2>/dev/null || echo "Dependencies resolved successfully"

      - name: Output cache info
        id: cache-info
        run: |
          echo "python-version=${{ env.PYTHON_VERSION }}" >> $GITHUB_OUTPUT
          echo "uv-cache-key=uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}" >> $GITHUB_OUTPUT

  # Linting and formatting - runs in parallel with tests
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: pre-check
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --group dev
          
      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Run ruff linting
        run: uv run ruff check . --output-format=github

      - name: Run ruff format check
        run: uv run ruff format --check .

      - name: Run mypy type checking
        run: uv run mypy fema_usar_mcp/ --show-error-codes
        continue-on-error: true  # Don't fail CI on type errors for now

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: pre-check
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        test-type: ["unit", "integration"]
      fail-fast: false
      max-parallel: 4

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --group dev
          uv sync --all-extras

      - name: Create test directories
        run: |
          mkdir -p test-results
          mkdir -p coverage-reports

      - name: Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              uv run pytest tests/ -m "unit" \
                --junitxml=test-results/junit-${{ matrix.python-version }}-unit.xml \
                --cov=fema_usar_mcp \
                --cov-report=xml:coverage-reports/coverage-${{ matrix.python-version }}-unit.xml \
                --cov-report=term-missing \
                --tb=short \
                -v
              ;;
            integration)
              uv run pytest tests/ -m "integration" \
                --junitxml=test-results/junit-${{ matrix.python-version }}-integration.xml \
                --cov=fema_usar_mcp \
                --cov-report=xml:coverage-reports/coverage-${{ matrix.python-version }}-integration.xml \
                --cov-report=term-missing \
                --tb=short \
                -v
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: test-results/
          retention-days: 30

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: coverage-reports/
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          file: coverage-reports/coverage-${{ matrix.python-version }}-${{ matrix.test-type }}.xml
          flags: ${{ matrix.test-type }}
          name: codecov-${{ matrix.python-version }}-${{ matrix.test-type }}
          fail_ci_if_error: false

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: pre-check
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync

      - name: Run bandit security scan
        run: |
          uv add --group dev bandit
          uv run bandit -r fema_usar_mcp/ -f json -o security-report.json
        continue-on-error: true

      - name: Run safety check
        run: |
          uv add --group dev safety
          uv run safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: "*-report.json"
          retention-days: 30

  # Performance and load tests (optional, runs only on main branch)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [pre-check, test]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --group dev
          uv sync --all-extras

      - name: Run performance tests
        run: |
          uv run pytest tests/ -m "slow" \
            --benchmark-json=benchmark-results.json \
            --tb=short \
            -v
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 90

  # Build and package validation
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Build package
        run: |
          uv build
          
      - name: Validate package
        run: |
          uv run python -m pip install dist/*.whl
          uv run python -c "import fema_usar_mcp; print('Package installed successfully')"
          uv run fema-usar-mcp --help || echo "Entry point validation (may fail in headless mode)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 90

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [pre-check, lint, test, security, build]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Pre-check: ${{ needs.pre-check.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          # Fail if any required job failed
          if [[ "${{ needs.pre-check.result }}" == "failure" || 
                "${{ needs.lint.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" ]]; then
            echo "Required jobs failed"
            exit 1
          fi
          
          echo "All required jobs passed!"