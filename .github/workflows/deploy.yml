name: Deploy

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.5.9"

jobs:
  # Only deploy after CI passes
  validate-deployment:
    name: Validate for Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy-ready: ${{ steps.validate.outputs.deploy-ready }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.event_name }}" == "release" ]; then
            ENV="production"
          else
            ENV="staging"
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for CI to complete
        if: github.event_name == 'push'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: 'CI Success'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Validate deployment readiness
        id: validate
        run: |
          echo "Validating deployment for ${{ steps.env.outputs.environment }}"
          
          # Add validation logic here (e.g., check if tests passed, no security issues)
          DEPLOY_READY="true"
          
          echo "deploy-ready=$DEPLOY_READY" >> $GITHUB_OUTPUT

  # Deploy to Fly.io
  deploy-flyio:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: needs.validate-deployment.outputs.deploy-ready == 'true'
    timeout-minutes: 20
    environment: 
      name: ${{ needs.validate-deployment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Build for deployment
        run: |
          uv sync --no-dev
          uv build

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        id: deploy
        run: |
          ENV="${{ needs.validate-deployment.outputs.environment }}"
          
          # Use different fly.toml for different environments
          if [ "$ENV" == "staging" ]; then
            FLY_CONFIG="fly.staging.toml"
          else
            FLY_CONFIG="fly.toml"
          fi
          
          # Deploy with appropriate config
          flyctl deploy --config $FLY_CONFIG --remote-only
          
          # Get the deployed URL
          APP_NAME=$(grep "^app" $FLY_CONFIG | cut -d'"' -f2)
          echo "url=https://${APP_NAME}.fly.dev" >> $GITHUB_OUTPUT
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Verify deployment
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          echo "Verifying deployment at: $URL"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Health check
          curl -f "$URL/health" || {
            echo "Health check failed"
            exit 1
          }
          
          echo "Deployment verified successfully!"

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment to ${{ needs.validate-deployment.outputs.environment }} successful"
            echo "üîó URL: ${{ steps.deploy.outputs.url }}"
          else
            echo "‚ùå Deployment to ${{ needs.validate-deployment.outputs.environment }} failed"
          fi

  # Deploy to Docker registries (optional)
  deploy-docker:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: needs.validate-deployment.outputs.deploy-ready == 'true' && (github.event_name == 'release' || github.event_name == 'workflow_dispatch')
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            fema/fema-usar-mcp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
