name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.5.9"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run full test suite
        run: |
          uv run pytest tests/ \
            --cov=fema_usar_mcp \
            --cov-report=xml \
            --tb=short \
            -v

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: validate-release
    timeout-minutes: 15
    environment: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          
          # Update version in pyproject.toml
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          
          echo "Updated version to: $VERSION"

      - name: Build package
        run: |
          uv build --wheel --sdist
          
          # List built files
          ls -la dist/

      - name: Verify package
        run: |
          # Install the built wheel and verify it works
          uv run python -m pip install dist/*.whl --force-reinstall
          uv run python -c "import fema_usar_mcp; print(f'Package version: {fema_usar_mcp.__version__ if hasattr(fema_usar_mcp, \"__version__\") else \"unknown\"}')"
          
          # Test entry points
          uv run fema-usar-mcp --help || echo "Entry point test completed"

      - name: Publish to PyPI
        if: github.repository_owner == 'fema'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          uv add twine
          uv run twine upload dist/*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          files: |
            dist/*
          body: |
            ## Release ${{ needs.validate-release.outputs.version }}
            
            ### What's New
            - See [CHANGELOG.md](CHANGELOG.md) for detailed changes
            
            ### Installation
            ```bash
            pip install fema-usar-mcp==${{ needs.validate-release.outputs.version }}
            ```
            
            ### Usage
            ```bash
            # Start the MCP server
            fema-usar-mcp
            
            # Start the HTTP API server
            fema-usar-http
            ```
            
            ### Verification
            This release has been automatically built and tested with:
            - ‚úÖ All unit tests passing
            - ‚úÖ All integration tests passing
            - ‚úÖ Code quality checks passing
            - ‚úÖ Security scans completed
            
            ---
            *This release was created automatically from tag ${{ needs.validate-release.outputs.version }}*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]
    if: success()
    steps:
      - name: Notification
        run: |
          echo "üéâ Successfully released version ${{ needs.validate-release.outputs.version }}"
          echo "üì¶ Package published to PyPI"
          echo "üè∑Ô∏è GitHub release created"