[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fema-usar-mcp"
version = "0.1.0"
description = "MCP server for Federal Urban Search and Rescue operations"
authors = [
    { name = "Federal USAR MCP Team", email = "hello@aeroastro.org" }
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.11"
keywords = ["mcp", "fema", "usar", "emergency-response", "ai-tools"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering",
    "Topic :: Other/Nonlisted Topic",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "fastmcp>=2.11.3",
    "pydantic>=2.0.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]
advanced = [
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "pillow>=10.0.0",
]
visualization = [
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
    "folium>=0.14.0",
    "dash>=2.14.0",
]
integration = [
    "boto3>=1.28.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "pika>=1.3.0",
]

[project.scripts]
fema-usar-mcp = "fema_usar_mcp.fastmcp_server:run"
fema-usar-http = "app.main:run"

[project.urls]
Homepage = "https://github.com/fema/fema-usar-mcp"
Documentation = "https://fema-usar-mcp.readthedocs.io/"
Repository = "https://github.com/fema/fema-usar-mcp.git"
"Bug Tracker" = "https://github.com/fema/fema-usar-mcp/issues"


[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"
# Respect black's decisions on line breaks
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
no_implicit_reexport = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "requires_network: Tests that require network access",
    "requires_auth: Tests that require authentication",
    "simulation: Field simulation tests",
]

[tool.coverage.run]
source = ["fema_usar_mcp"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pyyaml>=6.0.2",
    "ruff>=0.12.11",
]
